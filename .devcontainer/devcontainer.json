// general::ref: https://code.visualstudio.com/docs/devcontainers/containers
// creation::ref: https://code.visualstudio.com/docs/devcontainers/create-dev-container
// json_schema::ref: https://containers.dev/implementors/json_schema/
// variables::ref:
//   https://github.com/microsoft/vscode-remote-release/issues/2697#issuecomment-609854675
//   https://containers.dev/implementors/json_reference/#variables-in-devcontainerjson
{
  "name": "unCORE",
  "image": "ghcr.io/georglauterbach/dev-container-base:1.3.2",
  "features": {
    "ghcr.io/georglauterbach/dev-container-features/rust:0.4.0": {
      "additional-packages": "gdb-multiarch,jq,qemu-system-riscv64",
      "install-mold": "true"
    }
  },
  "updateRemoteUserUID": true,
  "remoteUser": "ubuntu",
  "containerUser": "ubuntu",
  "containerEnv": {
    "CARGO_TARGET_DIR": "${containerWorkspaceFolder}/code/.dev_container/target",
    "CARGO_HOME": "${containerWorkspaceFolder}/code/.dev_container/cargo_home",
    "RUSTUP_HOME": "${containerWorkspaceFolder}/code/.dev_container/rustup_home",
    "UNCORE_DEV_CONTAINER": "true"
  },
  // The repository root directory is mounted to `${containerWorkspaceFolder}`
  // implicitly (by the dev-container spec), and we want to navigate there and
  // then into the code sub-directory to immediately download the correct components
  // (that Cargo detects from the workspace setup in this directory).
  "postStartCommand": {
    "show version of rustup": "rustup --version",
    "show version of cargo and rustc": "cd \"${containerWorkspaceFolder}/code\" ; cargo --version ; rustc --version ;",
    "show version of mold": "mold --version",
    "set up VS Code tasks": "mkdir -p \"${containerWorkspaceFolder}/.vscode\" && cp --no-clobber \"${containerWorkspaceFolder}/.devcontainer/vscode/\"* \"${containerWorkspaceFolder}/.vscode/\""
  },
  "customizations": {
    "vscode": {
      "extensions": [
        "ZixuanWang.linkerscript",
        "sunshaoce.RISC-V",
        "webfreak.debug",
        "bierner.docs-view",
        "EditorConfig.EditorConfig",
        "streetsidesoftware.code-spell-checker"
      ],
      "settings": {
        // ? files
        "files.insertFinalNewline": true,
        "files.trimTrailingWhitespace": true,
        "files.exclude": {
          "**/.git": true
        },
        "files.watcherExclude": {
          "**/.git/objects/": true,
          "code/target": true,
          "code/.dev_container/": true
        },
        // ? extensions
        // * extensions::docsView
        "docsView.documentationView.updateMode": "sticky",
        // * extensions::cSpell
        "cSpell.diagnosticLevel": "Information",
        "cSpell.language": "en,de",
        "cSpell.enabledLanguageIds": [
          "json",
          "jsonc",
          "rust",
          "yaml",
          "yml"
        ],
        "cSpell.words": [
          "rustc",
          "rustup",
          "uncore",
          "unCORE",
          "devcontainer",
          "riscv"
        ],
        // * extensions::rust-analyzer
        "rust-analyzer.cargo.allTargets": false,
        "rust-analyzer.diagnostics.disabled": [
          "inactive-code"
        ]
      }
    }
  }
}
