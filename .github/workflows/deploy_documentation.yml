---
# gratefully copied and adjusted from docker-mailserver/docker-mailserver
name: Deploy Documentation

on: # yamllint disable-line rule:truthy
  workflow_dispatch:
  push:
    branches: [master]
    paths:
      - .github/workflows/documentation.yml
      - documentation/**
    tags: ['[0-9]+.[0-9]+*']

permissions:
  contents: write

env:
  DOCS_VERSION: edge
  CACHE_ID: unknown

jobs:
  deployment:
    name: Deploy documentation
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python 3
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Prepare CACHE_ID
        run: echo "CACHE_ID=$(date --utc '+%V')" >>"${GITHUB_ENV}"

      - name: Setup cache
        uses: actions/cache@v3
        with:
          key: mkdocs-material-${{ env.CACHE_ID }}
          path: .cache
          restore-keys: |
            mkdocs-material-

      - name: Install Python dependencies
        run: pip install mkdocs-material

      - name: Check if deploy is for a `v<major>.<minor>` tag version instead of `edge`
        if: startsWith(github.ref, 'refs/tags/')
        working-directory: documentation
        run: |
          DOCS_VERSION=$(grep -oE 'v[0-9]+\.[0-9]+' <<< "${GITHUB_REF}")
          echo "DOCS_VERSION=${DOCS_VERSION}" >>"${GITHUB_ENV}"
          # Docs should build referencing the tagged version instead:
          sed -i "s|^\(site_url:.*\)edge|\1${DOCS_VERSION}|" config.yml

      - name: Deploy documentation
        run: mkdocs gh-deploy --strict

  add-version-to-documentation:
    name: Update `versions.json` if necessary
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/')
    needs: deployment
    steps:
      - name: Checkout the tagged commit (shallow clone)
        uses: actions/checkout@v4

      - name: Checkout the docs deployment branch to a subdirectory
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages

      # Updates `env.DOCS_VERSION` to the tag version; if invalid exits job early.
      - name: Ensure `versions.json` has `v<major>.<minor>` substring from tag name
        id: add-version
        continue-on-error: true
        working-directory: gh-pages
        run: |
          MAJOR_MINOR=$(grep -oE 'v[0-9]+\.[0-9]+' <<< "${GITHUB_REF}")
          echo "DOCS_VERSION=${MAJOR_MINOR}" >>"${GITHUB_ENV}"

          if [[ -z "${MAJOR_MINOR}" ]]; then
            echo "Could not extract valid \`v<MAJOR>.<MINOR>\` substring, exiting.."
            exit 1
          fi

          VERSIONS_JSON='versions.json'
          IS_VALID=$(jq '.' "${VERSIONS_JSON}")

          if [[ ! -f "${VERSIONS_JSON}" ]] || [[ -z "${IS_VALID}" ]]
          then
            echo "'${VERSIONS_JSON}' doesn't exist or is invalid. Creating.."
            echo '[{"version": "edge", "title": "edge", "aliases": []}]' > "${VERSIONS_JSON}"
          fi

          # Only add this tag version the first time it's encountered:
          VERSION_EXISTS=$(jq --arg version "${MAJOR_MINOR}" '[.[].version == $version] | any' "${VERSIONS_JSON}")

          if [[ ${VERSION_EXISTS} == "true" ]]
          then
            echo "${MAJOR_MINOR} docs are already supported. Nothing to change, exiting.."
            exit 1
          else
            echo "Added support for ${MAJOR_MINOR} docs."
            # Add any logic here if you want the version selector to have a different label (`title`) than the `version` URL/subdirectory.
            TITLE=${TITLE:-${MAJOR_MINOR}}

            # Assumes the first element is always the "latest" unreleased version (`edge` for us), and then newest version to oldest.
            # `jq` takes the first array element of array as slice, concats with new element, then takes the slice of remaining original elements to concat.
            # Thus assumes this script is always triggered by newer versions, no older major/minor releases as our build workflow isn't setup to support rebuilding older docs.
            UPDATED_JSON=$(jq --arg version "${MAJOR_MINOR}" --arg title "${TITLE}" \
              '.[:1] + [{version: $version, title: $title, aliases: []}] + .[1:]' \
              "${VERSIONS_JSON}"
            )

            # See `jq` FAQ advising this approach to update file:
            # https://github.com/stedolan/jq/wiki/FAQ
            echo "${UPDATED_JSON}" >tmp.json && mv tmp.json "${VERSIONS_JSON}"
          fi

      # If an actual change was made to `versions.json`, commit and push it.
      # Otherwise the step is skipped instead of reporting job failure.
      - name: 'Push update for `versions.json`'
        if: ${{ steps.add-version.outcome == 'success' }}
        working-directory: gh-pages
        env:
          # Assign commit authorship to official Github Actions bot when pushing to the `gh-pages` branch:
          GIT_USER: 'github-actions[bot]'
          GIT_EMAIL: '41898282+github-actions[bot]@users.noreply.github.com'
        run: |
          git config user.name ${{ env.GIT_USER }}
          git config user.email ${{ env.GIT_EMAIL }}
          git add versions.json
          git commit -m "chore: Add ${{ env.DOCS_VERSION }} to version selector list"
          git push
